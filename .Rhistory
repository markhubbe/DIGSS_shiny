string2vector(c("sq","hex"))
string2vector(("sq,hex"))
string2vector("sq,hex",FALSE)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
?observe
?reactive
runApp()
x<-NULL
length(x)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(width.loop)
width.loop$SitesFound
runApp()
tmp<-NULL
runApp()
tmp
p<-ggplot(tmp$SitesFound,aes(x='Loop Value',y=Mean))+
geom_line()+
geom_point()
p
x<-tmp$SitesFound
x
colnames(x)[1]<-"Value"
x
p<-ggplot(x,aes(x=Value,y=Mean))+
geom_line()+
geom_point()
p
p<-ggplot(x,aes(x=Value,y=Mean,group=1))+
geom_line()+
geom_point()
p
?seq
df<-data.frame(x=c(1:nrow(x),nrow(x):1),
sd=c(x$Mean-x$`St Dev`,max=x$Mean+x$`St Dev`[nrow(x):1]))
df<-data.frame(x=c(1:nrow(x),nrow(x):1),
sd=c(x$Mean-x$`St Dev`,max=x$Mean+x$`St Dev`[nrow(x):1]))
p<-ggplot(x,aes(x=Value,y=Mean,group=1))+
geom_line()+
geom_point()+
geom_polygon(df,aes(x=x,y=sd),col="blue")
p
p<-ggplot(x,aes(x=Value,y=Mean,group=1))+
geom_line()+
geom_point()+
geom_polygon(data=df,aes(x=x,y=sd),col="blue")
p
p<-ggplot(x,aes(x=Value,y=Mean,group=1))+
geom_polygon(data=df,aes(x=x,y=sd),fill="blue")+
geom_line()+
geom_point()
p
p<-ggplot()+
geom_polygon(data=df,aes(x=x,y=sd),fill="blue")+
geom_line(x,aes(x=Value,y=Mean,group=1))+
geom_point()
p
p<-ggplot()+
geom_polygon(data=df,aes(x=x,y=sd),fill="blue")+
geom_line(data=x,aes(x=Value,y=Mean,group=1))+
geom_point()
p
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1))+
geom_polygon(data=df,aes(x=x,y=sd),fill="blue")+
geom_line(data=x,aes(x=Value,y=Mean,group=1))+
geom_point()
p
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1))+
geom_polygon(data=df,aes(x=x,y=sd),fill="blue")+
geom_line(data=x,aes(x=Value,y=Mean,group=1))+
geom_point(data=x,aes(x=Value,y=Mean,group=1))
p
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1))+
geom_line()+
geom_point()+
#geom_polygon(data=df,aes(x=x,y=sd),fill="blue")+
p
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1))+
geom_line()+
geom_point()
#geom_polygon(data=df,aes(x=x,y=sd),fill="blue")+
p
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1))+
geom_line()+
geom_point()+
geom_polygon(data=df,aes(x=x,y=sd),fill="blue")
p
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1))+
geom_line()+
geom_point()+
geom_polygon(data=df,aes(x=x,y=sd),fill=rgba(0,0,1,0.5))
p
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1))+
geom_line()+
geom_point()+
geom_polygon(data=df,aes(x=x,y=sd),fill=rgb(0,0,1,0.5))
p
x
df95<-data.frame(x=c(1:nrow(x),nrow(x):1),
range=c(x$`Quant 2.5%`,x$`Quant 97.5%`[nrow(x):1]))
df<-data.frame(x=c(1:nrow(x),nrow(x):1),
sd=c(x$Mean-x$`St Dev`,
x$Mean+x$`St Dev`[nrow(x):1]))
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1))+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin=Mean-`St Dev`, ymax=Mean+`St Dev`), width=.1))
geom_polygon(data=df95,aes(x=x,y=sd),fill=rgb(0,0,1,0.5))
p
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1))+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin=Mean-`St Dev`, ymax=Mean+`St Dev`), width=.1)+
geom_polygon(data=df95,aes(x=x,y=sd),fill=rgb(0,0,1,0.5))
p
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1))+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin= Mean-`St Dev`, ymax= Mean+`St Dev`), width=.1)+
geom_polygon(data=df95,aes(x=x,y=range),fill=rgb(0,0,1,0.5))
p
?viridis_pal
col_palette<-viridis(5)
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1), col=col_palette[1])+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin= Mean-`St Dev`, ymax= Mean+`St Dev`), width=.1)+
geom_polygon(data=df95,aes(x=x,y=range),fill=rgb(0,0,1,0.5))+
+
+theme_minimal()
p
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1), col=col_palette[1])+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin= Mean-`St Dev`, ymax= Mean+`St Dev`), width=.1)+
geom_polygon(data=df95,aes(x=x,y=range),fill=rgb(0,0,1,0.5))+
+theme_minimal()
p
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1), col=col_palette[1])+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin= Mean-`St Dev`, ymax= Mean+`St Dev`), width=.1)+
geom_polygon(data=df95,aes(x=x,y=range),fill=rgb(0,0,1,0.5))+
theme_minimal()
p
line_palette<-viridis(5)
fill_palette<-viridis(5,alpha = 0.5)
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1), color=col_palette[1])+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin= Mean-`St Dev`, ymax= Mean+`St Dev`), width=.1)+
geom_polygon(data=df95,aes(x=x,y=range),fill=fill_palette[1])+
theme_minimal()
p
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1), color=col_palette[1])+
geom_line(size=1.5)+
geom_point(size=4)+
geom_errorbar(aes(ymin= Mean-`St Dev`, ymax= Mean+`St Dev`), width=.1)+
geom_polygon(data=df95,aes(x=x,y=range),fill=fill_palette[1])+
theme_minimal()
p
p<-ggplot(data=x,aes(x=Value,y=Mean,group=1), color=col_palette[1])+
geom_line(size=1)+
geom_point(size=4)+
geom_errorbar(aes(ymin= Mean-`St Dev`, ymax= Mean+`St Dev`), width=.1)+
geom_polygon(data=df95,aes(x=x,y=range),fill=fill_palette[1])+
theme_minimal()
p
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
shiny::runApp()
library(DIGSS)
shiny::runApp()
surveySimShiny<-function(SurveyParameters, artifact.analysis=TRUE, plot=TRUE, plot.artifacts=FALSE,areaprecision=1000, grid_ratio=NA){
#We start with some checks and trying to make the function more user friendly
if(class(SurveyParameters)!="SurveySim"){
stop(cat("ERROR: Wrong Type of Object.","Create object list following ParametersCreator()",sep="\n"))
}
#Here we extract variables from the list (easier than call the list everytime)
col.width<-SurveyParameters$col.width
grid.type<-SurveyParameters$grid.type
simulations<-SurveyParameters$simulations
Area<-SurveyParameters$area
site.density<-SurveyParameters$site.density
site.area<-SurveyParameters$site.area
overlap<-SurveyParameters$overlap
obj.density<-SurveyParameters$obj.density
obj.distribution<-SurveyParameters$obj.distribution
#I'm bringing this back to the scale of km2 already here
survey.radius<-SurveyParameters$survey.radius/1e3
#this is for plotting the survey circle
circle.x<-seq(-survey.radius,survey.radius,length=40)
circle.y<-sqrt(survey.radius^2-circle.x^2)
circle.x<-c(circle.x,circle.x[length(circle.x):1])
circle.y<-c(circle.y,-circle.y)
GRID<-c("square","rectangle","staggered","hexagonal","arbitrary.staggered")
grid.type<-pmatch(grid.type,GRID)
if (is.na(grid.type)){
stop(cat("ERROR: invalid grid type.","Valid grids are: square,rectangle,staggered,hexagonal,arbitrary.staggered",sep="\n"))
}
#1. Build the grid
##We will get the number of rows t, i (interval between units in a row),s(space between columns),
## and e (Distance from transect to survey area edge)
s<-col.width/1000
t<-floor(Area[1]/s)+1
e<-(Area[1]%%(s))/2
if(grid.type==1){ #square
i=s
}
if(grid.type==2){ #rectangle
i=s*grid_ratio
}
if(grid.type==3){ #staggered
i=s
}
if(grid.type==4){ #hexagonal
i=(3^0.5/2)*s
}
if(grid.type==5){ #arbitrary staggered
i=s*grid_ratio
}
#2. We create the grid (or rather the points of intersection)
xseq<-seq(0,Area[1],by=s)
yseq<-seq(0,Area[2],by=i)
#.this centralizes the grid, so that the edges are even in the field
xseq<-xseq+(Area[1]-max(xseq))/2
yseq<-yseq+(Area[2]-max(yseq))/2
#i.this is the object that will store final summary stats
SurveySummary<-list("Summary"=data.frame(matrix(NA,5,7)),
"BySite"=matrix(0,simulations,10),
"ByArtifact"=matrix(NA,simulations,7),
"Parameters"=list("col.width"=col.width,
"grid.type"=grid.type,
"simulations"=simulations,
"Area"=Area,
"site.density"= site.density,
"site.area"=site.area,
"overlap"=overlap,
"obj.density"=obj.density,
"obj.distribution"=obj.distribution,
"survey.radius"=survey.radius*1000),
"plot"=NULL)
colnames(SurveySummary$Summary)<-c("Observed values","Mean","StDev","Min","Max","Quantile 2.5%","Quantile 97.5%")
SurveySummary$Summary[,1]<-c("Surveys per simulation","% of sites found","% of sites found on artifacts","Artifacts per survey","Success Rate Index")
colnames(SurveySummary$BySite)<-c("#SurveyHits","#TotalSurveys","#SitesFound",
"#TotalSites","%SitesFound","%SurveyFind",
"MaxSurveys/Site","AvgSurveys/Site","RealSiteArea",
"SuccessRateIndex")
colnames(SurveySummary$ByArtifact)<-c("#SurveyHits","AvgArtifacts/Survey","#SitesFound","#TotalSites","%SitesFound","%SurveyFind","AvgArtifactDensity")
#this is the number of surveys in the grid, to use in later calculations
n.pits<-length(xseq)*length(yseq)
if(grid.type==3||grid.type==4||grid.type==5){
n.pits=n.pits-floor(length(yseq)/2)
}
#3. We create now the loop that will create all the maps and grids
withProgress(message=paste0("Simulation: ",0,"/",simulations),min=0,max=simulations,value=0,{
for (a in 1:simulations){
incProgress(1,message=paste0("Simulation: ",a,"/",simulations))
sitemap<-fieldMap(Area,site.density,site.area,overlap,plot=FALSE,areaprecision=areaprecision)
site.frame<-sitemap$site.frame
#3a. We will do the analysis per site, so we don't need to store artifacts in the memory.
##i. create a matrix to store how many sites each survey hits
SurveyHitsMatrix<-matrix(0,length(xseq),length(yseq))
SurveysPerSite<-rep(0,nrow(site.frame))
if(artifact.analysis==TRUE){
ArtiHitsMatrix<-matrix(0,length(xseq),length(yseq))
SurveysWithArtiPerSite<-rep(0,nrow(site.frame))
#this will create the vector for unique object densities per site, if use selects a range
obj.density.vector<-rep(NA,nrow(site.frame))
}
#Plot1 - here we start the plot
if(plot==TRUE & a==simulations){
plot.new()
dev.control("enable")
plot.window(c(0,Area[1]),c(0,Area[2]),asp=Area[1]/Area[2])
axis(1,at=round(xseq,2))
axis(2,at=round(yseq,2))
box()
title(main=paste("Sites from simulation",a,"of",simulations),xlab="km",ylab="km")
}
withProgress(message=paste0("Site: ",0,"/",nrow(site.frame)),min=0,max=nrow(site.frame),value=0,{
for (b in 1:nrow(site.frame)){
incProgress(1,message=paste0("Site: ",b,"/",nrow(site.frame)))
#ii.create a tmp matrix to see which surveys hit this specific site
tmpHitMatrix<-matrix(FALSE,length(xseq),length(yseq))
#iii. test matrices.
for (c in 1:length(yseq)){
#iv. this if is to fix the length of the x positions for hexagonal grids.
if(grid.type==3||grid.type==4||grid.type==5){
if(b%%2==0){
xvals=xseq+0.5*s
xvals<-xvals[-length(xvals)]
} else {
xvals=xseq
}
}else{
xvals=xseq
}
##I'm adding radius of pit to a and b, to increase the site accordingly and test if any
## part of the pit hits the site.
tmpHit<-((xvals-site.frame[b,5])*cos(site.frame[b,4])+(yseq[c]-site.frame[b,6])*sin(site.frame[b,4]))^2/(site.frame[b,7]+survey.radius)^2+
((xvals-site.frame[b,5])*sin(site.frame[b,4])-(yseq[c]-site.frame[b,6])*cos(site.frame[b,4]))^2/(site.frame[b,8]+survey.radius)^2<=1
tmpHitMatrix[1:length(xvals),c]<-tmpHit
}
#v.here we add the stats for this site
SurveysPerSite[b]<-sum(tmpHitMatrix)
SurveyHitsMatrix<-SurveyHitsMatrix+tmpHitMatrix
##vi. if you want to look at artifact counts, here is where we start the madness.
if(artifact.analysis==TRUE){
##. we will only generate the cloud of artifacts if strictly necessary
obj.density.vector[b]<-runif(1,obj.density[1],obj.density[length(obj.density)])
if(sum(tmpHitMatrix)>0|plot.artifacts==TRUE & a==simulations){
if(plot.artifacts==TRUE & a==simulations){
plot.now=TRUE
}else{
plot.now=FALSE
}
artifacts<-cloudGenerator(obj.density.vector[b],site.frame[b,7],site.frame[b,8],site.frame[b,4],
site.frame[b,5],site.frame[b,6],type=obj.distribution,plot=plot.now)
}
##this is the matrix that will store the total number of artifacts per survey
tmpArtiCount<-matrix(0,length(xseq),length(yseq))
##vii. now we go and see how many survey pits find how many pieces.
for(c in 1:length(yseq)){
for(d in 1:length(xvals)){
if(sum(tmpHitMatrix)>0){
for (e in 1:length(artifacts$coords)){
if(nrow(artifacts$coords[[e]])!=0){
tmpBelongIn<-((xvals[d]-site.frame[b,5])*cos(site.frame[b,4])+(yseq[c]-site.frame[b,6])
*sin(site.frame[b,4]))^2/(site.frame[b,7]*(e/length(artifacts$coords))+survey.radius)^2+
((xvals[d]-site.frame[b,5])*sin(site.frame[b,4])-(yseq[c]-site.frame[b,6])
*cos(site.frame[b,4]))^2/(site.frame[b,8]*(e/length(artifacts$coords))+survey.radius)^2<=1
if(e>1){
tmpBelongOut<-((xvals[d]-site.frame[b,5])*cos(site.frame[b,4])+(yseq[c]-site.frame[b,6])
*sin(site.frame[b,4]))^2/(site.frame[b,7]*((e-1)/length(artifacts$coords))-survey.radius)^2+
((xvals[d]-site.frame[b,5])*sin(site.frame[b,4])-(yseq[c]-site.frame[b,6])
*cos(site.frame[b,4]))^2/(site.frame[b,8]*((e-1)/length(artifacts$coords))-survey.radius)^2>1
#if(tmpBelongOut==TRUE){print(paste("Out:",c,d,e))}
}else{
tmpBelongOut<-TRUE
}
if(tmpBelongIn==TRUE&tmpBelongOut==TRUE){
artsIN<-((artifacts$coords[[e]][,1]-xvals[d])^2+(artifacts$coords[[e]][,2]-yseq[c])^2)^0.5<=survey.radius
artN<-sum(artsIN)
#print(paste("x=",d,"y=",c, "e=",e,"N=",artN))
tmpArtiCount[d,c]<-tmpArtiCount[d,c]+artN
}
}
}
}
if(tmpArtiCount[d,c]>0){
SurveysWithArtiPerSite[b]<-SurveysWithArtiPerSite[b]+1
}
}
}
ArtiHitsMatrix<-ArtiHitsMatrix+tmpArtiCount
}
#Plot2: here we continue the plot, byt plotting the sites. Artifacts should have been plotted by now above
if(plot==TRUE & a==simulations){
#1.Get the angles, x and y to plot the ellypses
angles<-seq(0,2*pi,length=72)
#x= h + a cos(t)*cos(c)-b*sin(t)*sin(c)
xcoords<- site.frame[b,5]+site.frame[b,7]*cos(angles)*cos(site.frame[b,4])-site.frame[b,8]*sin(angles)*sin(site.frame[b,4])
#y= k + b sin(t)*cos(c)+a*cos(t)*sin(c)
ycoords<- site.frame[b,6]+site.frame[b,8]*sin(angles)*cos(site.frame[b,4])+site.frame[b,7]*cos(angles)*sin(site.frame[b,4])
polygon(xcoords,ycoords,border=rgb(0,0,1,),lty=3)
text(site.frame[b,5],site.frame[b,6],b,cex=1)
}
}
})
#4. Get the summary stats
#i. By Site
SurveySummary$BySite[a,1]<-length(which(SurveyHitsMatrix>0)) # #surveyhits
SurveySummary$BySite[a,2]<-n.pits # #Totalsurveys
SurveySummary$BySite[a,3]<-length(which(SurveysPerSite>0)) #Sites found
SurveySummary$BySite[a,4]<-nrow(site.frame) #Total sites
SurveySummary$BySite[a,5]<-SurveySummary$BySite[a,3]/SurveySummary$BySite[a,4] # %sites found
SurveySummary$BySite[a,6]<-SurveySummary$BySite[a,1]/SurveySummary$BySite[a,2] # % survey find
SurveySummary$BySite[a,7]<-max(SurveysPerSite) # Max surveys/site
SurveySummary$BySite[a,8]<-mean(SurveysPerSite) # avg surveys / site
SurveySummary$BySite[a,9]<-sitemap$ActualArea #Real Site area
SurveySummary$BySite[a,10]<-SurveySummary$BySite[a,6]/SurveySummary$BySite[a,9] #SuccessRateIndex
#ii. By Artifact
if(artifact.analysis==TRUE){
SurveySummary$ByArtifact[a,1]<-length(which(ArtiHitsMatrix>0)) #survey hits
SurveySummary$ByArtifact[a,2]<-ifelse(SurveySummary$ByArtifact[a,1]>0,sum(ArtiHitsMatrix)/SurveySummary$ByArtifact[a,1],0)#Avg Artifacts per survey
SurveySummary$ByArtifact[a,3]<-length(which(SurveysWithArtiPerSite>0)) #sitesfound
SurveySummary$ByArtifact[a,4]<-nrow(site.frame) #Total Sites
SurveySummary$ByArtifact[a,5]<-SurveySummary$ByArtifact[a,3]/SurveySummary$ByArtifact[a,4] #%Sites found
SurveySummary$ByArtifact[a,6]<-SurveySummary$ByArtifact[a,1]/n.pits #%Survey finds
SurveySummary$ByArtifact[a,7]<-mean(obj.density.vector)
}
#Plot 3: Finish plot by adding the grid:
if(plot==TRUE & a==simulations){
for(r in 1:length(yseq)){
xvals = xseq
nextxvals = xseq
if(grid.type==3||grid.type==4||grid.type==5)
if(r%%2==0){
xvals=xseq+0.5*s
xvals<-xvals[-length(xvals)]
}else{
#this is for me to plot the lines that connect the survey dots
nextxvals=nextxvals+0.5*s
nextxvals<-nextxvals[-length(xvals)]
}
points(xvals,rep(yseq[r],length(xvals)),pch=16,cex=0.5)
for (q in 1:length(xvals)){
polygon(circle.x+xvals[q],circle.y+yseq[r],lwd=2)
}
#here I plot lines for the grids, to make them look nicer
lines(c(xvals[1],xvals[length(xvals)]),c(yseq[r],yseq[r]),lty=2)
if(r!=length(yseq)){
for(b in 1: length(xvals)){
if(is.na(nextxvals[b])!=TRUE){
lines(c(xvals[b],nextxvals[b]),c(yseq[r],yseq[r+1]),lty=2)
}
}
}
#and this is just to add lines to the hexagon to make the grid look like triangles
if(grid.type==4){
if(r%%2==1){
for (b in 2:length(xvals)){
lines(c(xvals[b],nextxvals[b-1]),c(yseq[r],yseq[r+1]),lty=2)
}
}else{
for (b in 1:length(xvals)){
lines(c(xvals[b],nextxvals[b+1]),c(yseq[r],yseq[r+1]),lty=2)
}
}
}
}
SurveySummary$plot<-recordPlot()
dev.off()
}
}
})
#Here we get the final Summary stats:
#iii. The Total summaries
##SurveysPersim
SurveySummary$Summary[1,2]<-mean(SurveySummary$BySite[,2])
##SitesFound%
SurveySummary$Summary[2,2]<-mean(SurveySummary$BySite[,5])
SurveySummary$Summary[2,3]<-sd(SurveySummary$BySite[,5])
SurveySummary$Summary[2,4]<-min(SurveySummary$BySite[,5])
SurveySummary$Summary[2,5]<-max(SurveySummary$BySite[,5])
SurveySummary$Summary[2,6]<-quantile(SurveySummary$BySite[,5],0.025)
SurveySummary$Summary[2,7]<-quantile(SurveySummary$BySite[,5],0.975)
##SitesFoundon Artifacts%
SurveySummary$Summary[3,2]<-mean(SurveySummary$ByArtifact[,5])
SurveySummary$Summary[3,3]<-sd(SurveySummary$ByArtifact[,5])
SurveySummary$Summary[3,4]<-min(SurveySummary$ByArtifact[,5])
SurveySummary$Summary[3,5]<-max(SurveySummary$ByArtifact[,5])
SurveySummary$Summary[3,6]<-quantile(SurveySummary$ByArtifact[,5],0.025)
SurveySummary$Summary[3,7]<-quantile(SurveySummary$ByArtifact[,5],0.975)
##ArtifactsPerSurvey
SurveySummary$Summary[4,2]<-mean(SurveySummary$ByArtifact[,2])
SurveySummary$Summary[4,3]<-sd(SurveySummary$ByArtifact[,2])
SurveySummary$Summary[4,4]<-min(SurveySummary$ByArtifact[,2])
SurveySummary$Summary[4,5]<-max(SurveySummary$ByArtifact[,2])
SurveySummary$Summary[4,6]<-quantile(SurveySummary$ByArtifact[,2],0.025)
SurveySummary$Summary[4,7]<-quantile(SurveySummary$ByArtifact[,2],0.975)
##SuccessRateIndex
SurveySummary$Summary[5,2]<-mean(SurveySummary$BySite[,10])
SurveySummary$Summary[5,3]<-sd(SurveySummary$BySite[,10])
SurveySummary$Summary[5,4]<-min(SurveySummary$BySite[,10])
SurveySummary$Summary[5,5]<-max(SurveySummary$BySite[,10])
SurveySummary$Summary[5,6]<-quantile(SurveySummary$BySite[,10],0.025)
SurveySummary$Summary[5,7]<-quantile(SurveySummary$BySite[,10],0.975)
return(SurveySummary)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("party")
